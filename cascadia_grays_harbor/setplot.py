""" Set up the plot figures, axes, and items to be done for each frame.This module is imported by the plotting routines and then thefunction setplot is called to set the plot parameters.    """ import pylabimport glob, osfrom numpy import loadtxtfrom matplotlib import image# Specific to ESS544 project:try:    CLAW = os.environ['CLAW']except:    raise Exception("Need to set CLAW environment variable")plot_zeta_map = False  # set to false if no image available# --------------------------def setplot(plotdata):# --------------------------        """     Specify what is to be plotted at each frame.    Input:  plotdata, an instance of clawpack.visclaw.data.ClawPlotData.    Output: a modified version of plotdata.        """     from clawpack.visclaw import colormaps, geoplot    plotdata.clearfigures()  # clear any old figures,axes,items dat    plotdata.format = 'binary'        clim_ocean = 6. # SET ocean color bar limits    clim_coast = 6. # SET land color bar limits    sealevel = 0.  # SET Level of tide in run relative to MHW    cmax_ocean = clim_ocean + sealevel    cmin_ocean = -clim_ocean + sealevel    cmax_coast = clim_coast + sealevel    cmin_coast = -clim_coast + sealevel    # To plot gauge locations on pcolor or contour plot, use this as    # an afteraxis function:    def addgauges(current_data):        from clawpack.visclaw import gaugetools        gaugetools.plot_gauge_locations(current_data.plotdata, \             gaugenos='all', format_string='ko', add_labels=True)    def timeformat(t):        from numpy import mod, sign        signt = sign(t)        t = abs(t)        hours = int(t/3600.) # seconds to integer number of hours        tmin = mod(t,3600.)  # seconds of remaining time beyond integer number of hours        min = int(tmin/60.)  # seconds to integer number of minutes        sec = int(mod(tmin,60.)) # remaining integer sec        tenth_sec = int(10*(t - int(t)))        timestr = '%s:%s:%s.%s' % (hours,str(min).zfill(2),str(sec).zfill(2),str(tenth_sec).zfill(1))        if signt < 0:            timestr = '-' + timestr        return timestr            def title_hours(current_data):        from pylab import title        t = current_data.t        timestr = timeformat(t)        # title('%s after earthquake' % timestr)        plotaxes.title = '%s after earthquake' % timestr                #-----------------------------------------    # Figure for N. Pacific    #-----------------------------------------                plotfigure = plotdata.new_plotfigure(name='Pacific', figno=0)    plotfigure.kwargs = {'figsize': (8,10)}    # plotfigure.show = True        # Set up for axes in this figure:    plotaxes = plotfigure.new_plotaxes()    plotaxes.title = 'Time after eartquake'    plotaxes.scaled = False    plotaxes.xlimits = [-130., -123.]    plotaxes.ylimits = [39., 52.]        def aa(current_data):        from pylab import ticklabel_format, xticks, gca, cos, pi, savefig        title_hours(current_data)        ticklabel_format(format='plain',useOffset=False)        xticks(rotation=20)        a = gca()        a.set_aspect(1./cos(48*pi/180.))    plotaxes.afteraxes = aa    # Water    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.surface_or_depth    my_cmap = colormaps.make_colormap({-1.0: [0.0,0.0,1.0], \                                     -0.5: [0.5,0.5,1.0], \                                      0.0: [1.0,1.0,1.0], \                                      0.5: [1.0,0.5,0.5], \                                      1.0: [1.0,0.0,0.0]})    plotitem.imshow_cmap = my_cmap    plotitem.imshow_cmin = cmin_ocean    plotitem.imshow_cmax = cmax_ocean    plotitem.add_colorbar = True    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    # Land    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.land    plotitem.imshow_cmap = geoplot.land_colors    plotitem.imshow_cmin = 0.0    plotitem.imshow_cmax = 100.0    plotitem.add_colorbar = False    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    plotaxes.afteraxes = addgauges    # Add contour lines of bathymetry:    plotitem = plotaxes.new_plotitem(plot_type='2d_contour')    plotitem.show = False    plotitem.plot_var = geoplot.topo    from numpy import arange, linspace    plotitem.contour_levels = linspace(-6000,0,7)    plotitem.amr_contour_colors = ['g']  # color on each level    plotitem.kwargs = {'linestyles':'solid'}    plotitem.amr_contour_show = [0,0,1,0]  # show contours only on finest level    plotitem.celledges_show = 0    plotitem.patchedges_show = 0    # Add contour lines of topography:    plotitem = plotaxes.new_plotitem(plot_type='2d_contour')    plotitem.show = False    plotitem.plot_var = geoplot.topo    from numpy import arange, linspace    plotitem.contour_levels = arange(0., 11., 1.)    plotitem.amr_contour_colors = ['g']  # color on each level    plotitem.kwargs = {'linestyles':'solid'}    plotitem.amr_contour_show = [0,0,0,1]  # show contours only on finest level    plotitem.celledges_show = 0    plotitem.patchedges_show = 0    #-----------------------------------------    # Figure for medium grid    #-----------------------------------------    plotfigure = plotdata.new_plotfigure(name="Grays Harbor Medium", figno=1)    plotfigure.show = True        # SET figure title, axes, size:    plotfigure.kwargs = {'figsize': (10,9)}    plotaxes = plotfigure.new_plotaxes()    plotaxes.scaled = False    plotaxes.xlimits = [-124.3, -123.7]    plotaxes.ylimits = [46.8, 47.2]    def aa(current_data):           from pylab import ticklabel_format, xticks, gca, cos, pi, savefig           title_hours(current_data)           ticklabel_format(format='plain',useOffset=False)           xticks(rotation=20)           a = gca()           a.set_aspect(1./cos(48*pi/180.))    plotaxes.afteraxes = aa    plotaxes.afteraxes = addgauges    # Water    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.surface_or_depth    plotitem.imshow_cmap = my_cmap    plotitem.imshow_cmin = cmin_coast    plotitem.imshow_cmax = cmax_coast    plotitem.add_colorbar = True    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    # Land    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.land    plotitem.imshow_cmap = geoplot.land_colors    plotitem.imshow_cmin = 0.0    plotitem.imshow_cmax = 100.0    plotitem.add_colorbar = False    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    #-----------------------------------------    # Figure for Ocean Shores    #-----------------------------------------    plotfigure = plotdata.new_plotfigure(name="Ocean Shores Fine", figno=2)    plotfigure.show = True        # SET figure title, axes, size:    plotfigure.kwargs = {'figsize': (10,9)}    plotaxes = plotfigure.new_plotaxes()    plotaxes.scaled = False    plotaxes.xlimits = [-124.2, -124.1]    plotaxes.ylimits = [46.925, 47.025]    def aa(current_data):           from pylab import ticklabel_format, xticks, gca, cos, pi, savefig           title_hours(current_data)           ticklabel_format(format='plain',useOffset=False)           xticks(rotation=20)           a = gca()           a.set_aspect(1./cos(48*pi/180.))    plotaxes.afteraxes = aa    plotaxes.afteraxes = addgauges    # Water    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.surface_or_depth    plotitem.imshow_cmap = my_cmap    plotitem.imshow_cmin = cmin_coast    plotitem.imshow_cmax = cmax_coast    plotitem.add_colorbar = True    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    # Land    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.land    plotitem.imshow_cmap = geoplot.land_colors    plotitem.imshow_cmin = 0.0    plotitem.imshow_cmax = 100.0    plotitem.add_colorbar = False    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    #-----------------------------------------    # Figure for Westport    #-----------------------------------------    plotfigure = plotdata.new_plotfigure(name="Westport Fine", figno=3)    plotfigure.show = True        # SET figure title, axes, size:    plotfigure.kwargs = {'figsize': (10,9)}    plotaxes = plotfigure.new_plotaxes()    plotaxes.scaled = False    plotaxes.xlimits = [-124.14, -124.08]    plotaxes.ylimits = [46.85, 46.92]    def aa(current_data):           from pylab import ticklabel_format, xticks, gca, cos, pi, savefig           title_hours(current_data)           ticklabel_format(format='plain',useOffset=False)           xticks(rotation=20)           a = gca()           a.set_aspect(1./cos(48*pi/180.))    plotaxes.afteraxes = aa    plotaxes.afteraxes = addgauges    # Water    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.surface_or_depth    plotitem.imshow_cmap = my_cmap    plotitem.imshow_cmin = cmin_coast    plotitem.imshow_cmax = cmax_coast    plotitem.add_colorbar = True    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    # Land    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.land    plotitem.imshow_cmap = geoplot.land_colors    plotitem.imshow_cmin = 0.0    plotitem.imshow_cmax = 100.0    plotitem.add_colorbar = False    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    #-----------------------------------------    # Figure for Hoquiam/Aberdeen    #-----------------------------------------    plotfigure = plotdata.new_plotfigure(name="Hoquiam Aberdeen Fine", figno=4)    plotfigure.show = True        # SET figure title, axes, size:    plotfigure.kwargs = {'figsize': (10,9)}    plotaxes = plotfigure.new_plotaxes()    plotaxes.scaled = False    plotaxes.xlimits = [-123.925, -123.8]    plotaxes.ylimits = [46.95, 46.99]    def aa(current_data):           from pylab import ticklabel_format, xticks, gca, cos, pi, savefig           title_hours(current_data)           ticklabel_format(format='plain',useOffset=False)           xticks(rotation=20)           a = gca()           a.set_aspect(1./cos(48*pi/180.))    plotaxes.afteraxes = aa    plotaxes.afteraxes = addgauges    # Water    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.surface_or_depth    plotitem.imshow_cmap = my_cmap    plotitem.imshow_cmin = cmin_coast    plotitem.imshow_cmax = cmax_coast    plotitem.add_colorbar = True    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    # Land    plotitem = plotaxes.new_plotitem(plot_type='2d_imshow')    plotitem.plot_var = geoplot.land    plotitem.imshow_cmap = geoplot.land_colors    plotitem.imshow_cmin = 0.0    plotitem.imshow_cmax = 100.0    plotitem.add_colorbar = False    plotitem.amr_celledges_show = [0,0,0]    plotitem.amr_patchedges_show = [0]    #-----------------------------------------    # Figures for gauges    #-----------------------------------------        # plotfigure.clf_each_gauge = False    # Plot Flood Depth    plotfigure = plotdata.new_plotfigure(name='Flood Depth',figno=300,type='each_gauge')    plotaxes = plotfigure.new_plotaxes()    plotaxes.xlimits = [12000.,14400.]    # plotaxes.ylimits = 'auto'    plotaxes.ylimits = [-10,10]    plotaxes.title = 'h, Flood Depth'    plotitem = plotaxes.new_plotitem(plot_type='1d_plot')    def variables(current_data):        from numpy import where        from numpy import sqrt        q = current_data.q        h = q[0,:]        hu = q[1,:]        hv = q[2,:]        return h    plotitem.plot_var = variables    plotitem.plotstyle = 'b-'    # Plot topo as green curve:    plotitem = plotaxes.new_plotitem(plot_type='1d_plot')    def gaugetopo(current_data):        q = current_data.q        h = q[0,:]        eta = q[3,:]        topo = eta - h        return topo           plotitem.plot_var = gaugetopo    plotitem.plotstyle = 'g-'    # Plot zero line as black line:    def add_zeroline(current_data):        from pylab import plot, legend        t = current_data.t        legend(('surface','topography'),loc='lower left')        plot(t, 0*t, 'k')    plotaxes.afteraxes = add_zeroline        # Plot Speed    plotfigure = plotdata.new_plotfigure(name='Speed',figno=301,type='each_gauge')    plotaxes = plotfigure.new_plotaxes()    plotaxes.xlimits = [12000.,14400.]    # plotaxes.ylimits = 'auto'    plotaxes.ylimits = [-10,10]    plotaxes.title = 's, Current Speed'    plotitem = plotaxes.new_plotitem(plot_type='1d_plot')    def variables(current_data):        from numpy import where        from numpy import sqrt        q = current_data.q        h = q[0,:]        hu = q[1,:]        hv = q[2,:]        ss = where(h>0, (hu**2 + hv**2)/h**2, 0.)        s = sqrt(ss)        return s    plotitem.plot_var = variables    plotitem.plotstyle = 'b-'    # Plot topo as green curve:    plotitem = plotaxes.new_plotitem(plot_type='1d_plot')    def gaugetopo(current_data):        q = current_data.q        h = q[0,:]        eta = q[3,:]        topo = eta - h        return topo           plotitem.plot_var = gaugetopo    plotitem.plotstyle = 'g-'    # Plot zero line as black line:    def add_zeroline(current_data):        from pylab import plot, legend        t = current_data.t        legend(('surface','topography'),loc='lower left')        plot(t, 0*t, 'k')    plotaxes.afteraxes = add_zeroline    # Plot Momentum Flux    plotfigure = plotdata.new_plotfigure(name='Momentum Flux',figno=302,type='each_gauge')    plotaxes = plotfigure.new_plotaxes()    plotaxes.xlimits = [12000.,14400.]    # plotaxes.ylimits = 'auto'    plotaxes.ylimits = [-10,10]    plotaxes.title = 'hss, Momentum Flux'    plotitem = plotaxes.new_plotitem(plot_type='1d_plot')    def variables(current_data):        from numpy import where, sqrt        q = current_data.q        h = q[0,:]        hu = q[1,:]        hv = q[2,:]        hss = where(h>0, (hu**2 + hv**2)/h, 0.)        return hss    plotitem.plot_var = variables    plotitem.plotstyle = 'b-'    # Plot topo as green curve:    plotitem = plotaxes.new_plotitem(plot_type='1d_plot')    def gaugetopo(current_data):        q = current_data.q        h = q[0,:]        eta = q[3,:]        topo = eta - h        return topo           plotitem.plot_var = gaugetopo    plotitem.plotstyle = 'g-'    # Plot zero line as black line:    def add_zeroline(current_data):        from pylab import plot, legend        t = current_data.t        legend(('surface','topography'),loc='lower left')        plot(t, 0*t, 'k')    plotaxes.afteraxes = add_zeroline    #-----------------------------------------    # Figures for fgmax - max values on fixed grids    #-----------------------------------------        #path_plots = CLAW + '/ESS544/_runs/1964Alaska/_plots/'    #otherfigure = plotdata.new_otherfigure(name='Walsh 11',fname=path_plots + 'amplitude_times.png')    otherfigure=plotdata.new_otherfigure(name='Amplitude and Arrival Times',fname='amplitude_times.png')    #-----------------------------------------        # Parameters used only when creating html and/or latex hardcopy    # e.g., via clawpack.visclaw.frametools.printframes:    plotdata.printfigs = True                # print figures    plotdata.print_format = 'png'            # file format    plotdata.print_framenos = 'all'          # list of frames to print    plotdata.print_fignos = 'all'            # list of figures to print    plotdata.print_gaugenos = 'all'          # list of gauges to print    plotdata.html = True                     # create html files of plots?    plotdata.html_homelink = '../README.html'   # pointer for top of index    plotdata.latex = True                    # create latex file of plots?    plotdata.latex_figsperline = 2           # layout of plots    plotdata.latex_framesperline = 1         # layout of plots    plotdata.latex_makepdf = False           # also run pdflatex?    return plotdata